# -*- coding: utf-8 -*-
"""orbit

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d1YWrhmPcHj75x664i7l-b-XmTlXmgup
"""

import numpy as np
from datetime import datetime

# Constants
mu = 398600.4418  # Gravitational parameter (km^3/s^2)
earth_radius = 6378.137  # Earth's radius (km)
e = 0.0001302  # Orbital eccentricity of Landsat 8
i = np.radians(98.2)  # Orbital inclination (radians)
a = 7050  # Semi-major axis of Landsat 8 orbit in km
T = 99 * 60  # Orbital period in seconds (99 minutes)
M0 = np.radians(265.6032)  # Mean anomaly at epoch (radians)
arg_perigee = np.radians(94.5315)  # Argument of perigee (radians)
raan = np.radians(343.7810)  # Right ascension of ascending node (radians)

# Orbital mean motion (rad/s)
n = 2 * np.pi / T

# Function to calculate the Mean Anomaly
def mean_anomaly(M0, n, t, t0):
    delta_t = (t - t0).total_seconds()  # Time difference in seconds
    M = M0 + n * delta_t
    return M % (2 * np.pi)  # Ensure it stays between 0 and 2π

# Function to calculate the Eccentric Anomaly from Mean Anomaly
def eccentric_anomaly(M, e):
    E = M  # Initialize E with M
    for _ in range(10):  # Iterative solution of Kepler's equation
        E = M + e * np.sin(E)
    return E

# Function to calculate the True Anomaly from Eccentric Anomaly
def true_anomaly(E, e):
    return 2 * np.arctan2(np.sqrt(1 - e**2) * np.sin(E), np.cos(E) - e)

# Function for rotation around the z-axis
def rotation_matrix_z(theta):
    return np.array([
        [np.cos(theta), -np.sin(theta), 0],
        [np.sin(theta), np.cos(theta), 0],
        [0, 0, 1]
    ])

# Function for rotation around the x-axis
def rotation_matrix_x(theta):
    return np.array([
        [1, 0, 0],
        [0, np.cos(theta), -np.sin(theta)],
        [0, np.sin(theta), np.cos(theta)]
    ])

# Function to calculate the satellite position at a given time
def satellite_position_at_time(t, t0):
    # Calculate Mean Anomaly
    M = mean_anomaly(M0, n, t, t0)

    # Calculate Eccentric Anomaly
    E = eccentric_anomaly(M, e)

    # Calculate True Anomaly
    nu = true_anomaly(E, e)

    # Calculate radius (distance from Earth's center to satellite)
    r = a * (1 - e**2) / (1 + e * np.cos(nu))

    # Calculate the position in the orbital plane
    x_orbit = r * np.cos(nu)
    y_orbit = r * np.sin(nu)
    z_orbit = 0  # For circular orbit, z is 0

    coordinates_orbital = np.array([x_orbit, y_orbit, z_orbit])

    # Rotation matrices
    R3_Omega = rotation_matrix_z(-raan)        # RAAN rotation (z-axis)
    R1_i = rotation_matrix_x(-i)               # Inclination rotation (x-axis)
    R3_omega = rotation_matrix_z(-arg_perigee)  # Argument of perigee rotation (z-axis)

    # Combine rotation matrices
    rotation_matrix = R3_Omega @ R1_i @ R3_omega

    # Transform orbital coordinates to geocentric coordinates
    coordinates_geocentric = rotation_matrix @ coordinates_orbital

    # Extract X, Y, Z coordinates in geocentric system
    X, Y, Z = coordinates_geocentric

    # Calculate longitude
    longitude = np.arctan2(Y, X)

    # Calculate distance from Earth's axis
    p = np.sqrt(X**2 + Y**2)

    # Initial latitude estimate (for iteration)
    latitude = np.arctan2(Z, p)

    # Iterate to refine latitude using Earth's oblateness
    e2 = 0.00669437999  # Earth's eccentricity squared (WGS-84 model)
    for _ in range(5):  # Iterate to converge to accurate latitude
        v = earth_radius / np.sqrt(1 - e2 * np.sin(latitude)**2)
        latitude = np.arctan2(Z + v * e2 * np.sin(latitude), p)

    # Calculate altitude from Earth's surface
    altitude = r - earth_radius

    # Convert latitude and longitude to degrees
    latitude_deg = np.degrees(latitude)
    longitude_deg = np.degrees(longitude)

    return latitude_deg, longitude_deg, altitude

# Calculate the satellite's position at the current time
t0 = datetime(2024, 10, 1, 12, 8, 26)
t = datetime.utcnow()  # Current time

# Calculate satellite's latitude, longitude, and altitude
latitude, longitude, altitude = satellite_position_at_time(t, t0)

# Output
print(f"Latitude: {latitude:.6f}°")
print(f"Longitude: {longitude:.6f}°")
print(f"Altitude: {altitude:.2f} km")